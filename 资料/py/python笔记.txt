一、概述
	Python是著名的“龟叔”Guido van Rossum在1989年圣诞节期间，为了打发无聊的圣诞节而编写的一个编程语言。
	Python为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作“内置电池（batteries included）”。用Python开发，许多功能不必从零编写，直接使用现成的即可。
	龟叔给Python的定位是“优雅”、“明确”、“简单”，所以Python程序看上去总是简单易懂，初学者学Python，不但入门容易，而且将来深入下去，可以编写那些非常非常复杂的程序。

	那Python适合开发哪些类型的应用呢？
		首选是网络应用，包括网站、后台服务等等； - PythonWeb
		其次是许多日常需要的小工具，包括系统管理员需要的脚本任务等等； - Python
		另外就是把其他语言开发的程序再包装起来，方便使用。 - 胶水语言
		在 爬虫 科学计算 等领域有独特优势
		AI
	Python的缺点。
		第一个缺点就是运行速度慢，和C程序相比非常慢，因为Python是解释型语言，你的代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。
		但是大量的应用程序不需要这么快的运行速度，因为用户根本感觉不出来。例如开发一个下载MP3的网络应用程序，C程序的运行时间需要0.001秒，而Python程序的运行时间需要0.1秒，慢了100倍，但由于网络更慢，需要等待1秒，你想，用户能感觉到1.001秒和1.1秒的区别吗？这就好比F1赛车和普通的出租车在北京三环路上行驶的道理一样，虽然F1赛车理论时速高达400公里，但由于三环路堵车的时速只有20公里，因此，作为乘客，你感觉的时速永远是20公里。
		第二个缺点就是代码不能加密。如果要发布你的Python程序，实际上就是发布源代码，这一点跟C语言不同，C语言不用发布源代码，只需要把编译后的机器码（也就是你在Windows上常见的xxx.exe文件）发布出去。要从机器码反推出C代码是不可能的，所以，凡是编译型的语言，都没有这个问题，而解释型的语言，则必须把源码发布出去。

二、安装配置
	安装包下载地址：
		http://www.python.org/download/

		Python目前分为两大版本，互不兼容：
			2.x.x
			3.x.x
		下载的时候要注意区分 根据需要的版本进行下载 目前两者都有所使用
	双击安装

	设置环境变量：
		将python安装位置配置到PATH环境变量下。

三、运行方式
	shell方式：
		在cmd窗口中输入python进入命令行模式 在其中以交互式方式执行

	shell方式调用py文件：
		在文件中编写Python脚本 文件后缀为.py
		进入该文件所在目录 直接执行./xxx.py

	IDE模式：
		pycharm
		pyDev for Eclipse

	**Python编码
		Python默认读取py文件时采用的编码格式是 ASCII 格式，如果文件不是该格式很可能出现乱码问题造成异常。
		解决方法为只要在文件开头加入 # -*- coding: UTF-8 -*- 或者 #coding=utf-8 来通知Python解释器在读取文件时采用的编码集

四、标识符
	在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。
	Python 中的标识符是区分大小写的。
	以下划线开头的标识符是有特殊意义的。
	以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入；
	以双下划线开头的 __foo 代表类的私有成员；以双下划线开头和结尾的 __foo__ 代表 Python 里特殊方法专用的标识，如 __init__() 代表类的构造函数。

五、语言细节
	1.语句
		Python通常一行为一条语句 不需要分号标识
		Python 可以同一行显示多条语句，方法是用分号 ;
		案例:
			print 'hello';print 'runoob';

		也可以使用反斜杠将一行语句分为多行解释：
		案例:
			total = item_one + \
			item_two + \
			item_three

		但是语句中[] {} () 中的内容不需要使用多行连接符。
		一个标识符也不能用多行连接符隔开

	2.缩进
		Python 中不使用{}来标识作用范围，而是用缩进来标识，所以Python中缩进式要严格遵循结构。

	3.注释
		使用#作为单行注释
		使用三个单引号或三个双引号作为多行注释

六、变量/常量类型
	Python中的变量/常量不需要声明符 直接写即可
	Python中的变量/常量不区分类型
	同一个变量可以被多次赋值为不同类型的值

	x="abc"
	x=123
	x = y = z = 999
	x,y,z=1,2,"abc"

	Python中的变量通常用小写表示 
	Python中的常量通常用大写表示 
	Python中的常量并不会受到保护 如果真的改是不会报错的 所以可以认为Python中并不真正存在语言意义上的常量 而是约定通过大写的变量标明它是一个常量 后续不要修改。

七、数据类型
	虽然引用没有数据类型 但是Python是有数据类型的概念的
	
	参看文档
	1.字符串
		字符串直接量
			可以用单引号 双引号 三引号引起来作为字符串直接量
			'abc'
			"abc"
			'''abc'''
			"""abc"""
			在声明字符串直接量时单引号和双引号没什么区别
			而三引号声明的字符串中可以包含任意字符 这些字符会被直接当作字符串的内容

			Python中并不存在类似java中char的字符类型 想要表示一个字符 写成一个长度为1的字符串即可
		字符串操作符
			+	字符串连接	
			>>>a + b
			'HelloPython'
			*	重复输出字符串	
			>>>a * 2
			'HelloHello'
			[]	通过索引获取字符串中字符	
			>>>a[1]
			'e'
			[ : ]	截取字符串中的一部分	
			>>>a[1:4]
			'ell'
			in	成员运算符 - 如果字符串中包含给定的字符返回 True	
			>>>"H" in a
			True
			not in	成员运算符 - 如果字符串中不包含给定的字符返回 True	
			>>>"M" not in a
			True
			r/R	原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母"r"（可以大小写）以外，与普通字符串有着几乎完全相同的语法。	
			>>>print r'\n'
			\n
			>>> print R'\n'
			\n
			%	格式字符串
		格式化字符串
			%c	 格式化字符及其ASCII码
			%s	 格式化字符串
			%d	 格式化整数
			%u	 格式化无符号整型
			%o	 格式化无符号八进制数
			%x	 格式化无符号十六进制数
			%X	 格式化无符号十六进制数（大写）
			%f	 格式化浮点数字，可指定小数点后的精度
			%e	 用科学计数法格式化浮点数
			%E	 作用同%e，用科学计数法格式化浮点数
			%g	 %f和%e的简写
			%G	 %f 和 %E 的简写
			%p	 用十六进制数格式化变量的地址
		案例：
			print "My name is %s and weight is %d kg!" % ('Zara', 21) 

	2.布尔类型
		直接量只有两个 True False
		布尔类型的与或非 and or not
	3.数值类型：
		整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。
		长整型(long integers) - 无限大小的整数，整数最后是一个大写或小写的L。
		浮点型(floating point real values) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）
		复数(complex numbers) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。

		类型转换：
			int(x [,base ])         将x转换为一个整数  
			long(x [,base ])        将x转换为一个长整数  
			float(x )               将x转换到一个浮点数  
			complex(real [,imag ])  创建一个复数  
			str(x )                 将对象 x 转换为字符串  
			repr(x )                将对象 x 转换为表达式字符串  
			eval(str )              用来计算在字符串中的有效Python表达式,并返回一个对象  
			tuple(s )               将序列 s 转换为一个元组  
			list(s )                将序列 s 转换为一个列表  
			chr(x )                 将一个整数转换为一个字符  
			unichr(x )              将一个整数转换为Unicode字符  
			ord(x )                 将一个字符转换为它的整数值  
			hex(x )                 将一个整数转换为一个十六进制字符串  
			oct(x )                 将一个整数转换为一个八进制字符串  
		数学函数：
			abs(x)	返回数字的绝对值，如abs(-10) 返回 10
			ceil(x)	返回数字的上入整数，如math.ceil(4.1) 返回 5
			cmp(x, y)	如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1
			exp(x)	返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045
			fabs(x)	返回数字的绝对值，如math.fabs(-10) 返回10.0
			floor(x)	返回数字的下舍整数，如math.floor(4.9)返回 4
			log(x)	如math.log(math.e)返回1.0,math.log(100,10)返回2.0
			log10(x)	返回以10为基数的x的对数，如math.log10(100)返回 2.0
			max(x1, x2,...)	返回给定参数的最大值，参数可以为序列。
			min(x1, x2,...)	返回给定参数的最小值，参数可以为序列。
			modf(x)	返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。
			pow(x, y)	x**y 运算后的值。
			round(x [,n])	返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。
			sqrt(x)	返回数字x的平方根，数字可以为负数，返回类型为实数，如math.sqrt(4)返回 2+0j
		随机数函数
			choice(seq)	从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。
			randrange ([start,] stop [,step])	从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1
			random()	随机生成下一个实数，它在[0,1)范围内。
			seed([x])	改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。
			shuffle(lst)	将序列的所有元素随机排序
			uniform(x, y)	随机生成下一个实数，它在[x,y]范围内。

		数学常量
			pi	数学常量 pi（圆周率，一般以π来表示）
			e	数学常量 e，e即自然常数（自然常数）

	4.空值
		None
	
八、运算符
	算术运算符
		+	加 - 两个对象相加	a + b 输出结果 30
		-	减 - 得到负数或是一个数减去另一个数	a - b 输出结果 -10
		*	乘 - 两个数相乘或是返回一个被重复若干次的字符串	a * b 输出结果 200
		/	除 - x除以y	b / a 输出结果 2
		%	取模 - 返回除法的余数	b % a 输出结果 0
		**	幂 - 返回x的y次幂	a**b 为10的20次方， 输出结果 100000000000000000000
		//	取整除 - 返回商的整数部分	9//2 输出结果 4 , 9.0//2.0 输出结果 4.0
	比较（关系）运算符
		==	等于 - 比较对象是否相等	(a == b) 返回 False。
		!=	不等于 - 比较两个对象是否不相等	(a != b) 返回 true.
		<>	不等于 - 比较两个对象是否不相等	(a <> b) 返回 true。这个运算符类似 != 。
		>	大于 - 返回x是否大于y	(a > b) 返回 False。
		<	小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。	(a < b) 返回 true。
		>=	大于等于	- 返回x是否大于等于y。	(a >= b) 返回 False。
		<=	小于等于 -	返回x是否小于等于y。	(a <= b) 返回 true。
	赋值运算符
		=	简单的赋值运算符	c = a + b 将 a + b 的运算结果赋值为 c
		+=	加法赋值运算符	c += a 等效于 c = c + a
		-=	减法赋值运算符	c -= a 等效于 c = c - a
		*=	乘法赋值运算符	c *= a 等效于 c = c * a
		/=	除法赋值运算符	c /= a 等效于 c = c / a
		%=	取模赋值运算符	c %= a 等效于 c = c % a
		**=	幂赋值运算符	c **= a 等效于 c = c ** a
		//=	取整除赋值运算符	c //= a 等效于 c = c // a
	位运算符
		&	按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0	(a & b) 输出结果 12 ，二进制解释： 0000 1100
		|	按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。	(a | b) 输出结果 61 ，二进制解释： 0011 1101
		~	按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1	(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。
		^	按位异或运算符：当两对应的二进位相异时，结果为1	(a ^ b) 输出结果 49 ，二进制解释： 0011 0001
		<<	左移动运算符：运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。	a << 2 输出结果 240 ，二进制解释： 1111 0000
		>>	右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数	a >> 2 输出结果 15 ，二进制解释： 0000 1111
	逻辑运算符
		and	x and y	布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。	(a and b) 返回 20。
		or	x or y	布尔"或"	- 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。	(a or b) 返回 10。
		not	not x	布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。	not(a and b) 返回 False
	成员运算符
		in	如果在指定的序列中找到值返回 True，否则返回 False。	x 在 y 序列中 , 如果 x 在 y 序列中返回 True。
		not in	如果在指定的序列中没有找到值返回 True，否则返回 False。	x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。
	身份运算符
		is	is是判断两个标识符是不是引用自一个对象	x is y, 如果 id(x) 等于 id(y) , is 返回结果 1
		is not	is not是判断两个标识符是不是引用自不同对象	x is not y, 如果 id(x) 不等于 id(y). is not 返回结果 1

	**运算符优先级
		**	指数 (最高优先级)
		~ + -	按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
		* / % //	乘，除，取模和取整除
		+ -	加法减法
		>> <<	右移，左移运算符
		&	位 'AND'
		^ |	位运算符
		<= < > >=	比较运算符
		<> == !=	等于运算符
		= %= /= //= -= += *= **=	赋值运算符
		is is not	身份运算符
		in not in	成员运算符
		not or and	逻辑运算符
九、条件语句
	if 判断条件：
		执行语句……
	else：
		执行语句……

	if 判断条件1:
		执行语句1……
	elif 判断条件2:
		执行语句2……
	elif 判断条件3:
		执行语句3……
	else:
		执行语句4……

十、循环语句
	1.while
		while 判断条件：
			执行语句……

		while 判断条件：
			执行语句……
		else：
			循环条件为false时执行else语句块
			

		**支持continue、break、pass

	2.for
		for iterating_var in sequence:
			执行语句……

		for index in range:
			执行语句……

		for.... else... #循环条件为false时执行else语句块

		**range()函数可以生成一个整数序列包含指定范围内的数据 再通过list()函数可以转换为一个List
		List(range(5))
		sum = 0
		for x in range(101):
			sum = sum + x
		print(sum)
			

十一、集合
	1.列表 - List
		内容可变 长度可变 类型可以不同 有序

		定义列表：
			list1 = ['physics', 'chemistry', 1997, 2000];
			list2 = [1, 2, 3, 4, 5 ];
			list3 = ["a", "b", "c", "d"];
		获取列表数据：
			list1[1]
			list2[1:5]
		更新列表：
			list[2] = 2001;
		删除元素：
			del list1[2];
		列表函数：
			len([1, 2, 3])	3	长度
			[1, 2, 3] + [4, 5, 6]	[1, 2, 3, 4, 5, 6]	组合
			['Hi!'] * 4	['Hi!', 'Hi!', 'Hi!', 'Hi!']	重复
			3 in [1, 2, 3]	True	元素是否存在于列表中
			for x in [1, 2, 3]: print x,	1 2 3	迭代
		列表截取：
			L[2]	'SPAM!'	读取列表中第三个元素
			L[-2]	'Spam'	读取列表中倒数第二个元素
			L[1:]	['Spam', 'SPAM!']	从第二个元素开始截取列表

		其他方法：
			cmp(list1, list2)
				比较两个列表的元素
			len(list)
				列表元素个数
			max(list)
				返回列表元素最大值
			min(list)
				返回列表元素最小值
			list(seq)
				将元组转换为列表
			list.append(obj)
				在列表末尾添加新的对象
			list.count(obj)
				统计某个元素在列表中出现的次数
			list.extend(seq)
				在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）
			list.index(obj)
				从列表中找出某个值第一个匹配项的索引位置
			list.insert(index, obj)
				将对象插入列表
			list.pop(obj=list[-1])
				移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
			list.remove(obj)
				移除列表中某个值的第一个匹配项
			list.reverse()
				反向列表中元素
			list.sort([func])
				对原列表进行排序

	2.元组
		不能修改的列表

		定义元组：
			tup1 = ('physics', 'chemistry', 1997, 2000);
			tup2 = (1, 2, 3, 4, 5 );
			tup3 = "a", "b", "c", "d";	
			tup1 = ();
			tup1 = (50,);#元组中只包含一个元素时，需要在元素后面添加逗号

		访问元组：
			tup1[0]
			tup2[1:5]

		修改元组：
			元组是不允许修改的 但是可以进行连接组合
				tup1 = (12, 34.56);
				tup2 = ('abc', 'xyz');
				tup3 = tup1 + tup2;
				print tup3;

		删除元祖：
			元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组
			tup = ('physics', 'chemistry', 1997, 2000);
			del tup;

		其他运算：
			len((1, 2, 3))	3	计算元素个数
			(1, 2, 3) + (4, 5, 6)	(1, 2, 3, 4, 5, 6)	连接
			('Hi!',) * 4	('Hi!', 'Hi!', 'Hi!', 'Hi!')	复制
			3 in (1, 2, 3)	True	元素是否存在
			for x in (1, 2, 3): print x,	1 2 3	迭代
			L[2]	'SPAM!'	读取第三个元素
			L[-2]	'Spam'	反向读取；读取倒数第二个元素
			L[1:]	('Spam', 'SPAM!')	截取元素
			cmp(tuple1, tuple2)
				比较两个元组元素。
			len(tuple)
				计算元组元素个数。
			max(tuple)
				返回元组中元素最大值。
			min(tuple)
				返回元组中元素最小值。
			tuple(seq)
				将列表转换为元组。


	3.字典 - 相当于java中的map
		创建字典：
			d = {key1 : value1, key2 : value2,... }
			键必须是唯一的，但值则不必。
			值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。
			字典中的内容无序

		访问字典：
			dict['Name']

		修改字典:
			dict['Age'] = 8; # update existing entry
			dict['School'] = "DPS School"; # Add new entry
		
		删除字典：
			del dict['Name']; # 删除键是'Name'的条目
			dict.clear();     # 清空词典所有条目
			del dict ;        # 删除词典


		其他方法：
			cmp(dict1, dict2)
				比较两个字典元素。
			len(dict)
				计算字典元素个数，即键的总数。
			str(dict)
				输出字典可打印的字符串表示。
			type(variable)
				返回输入的变量类型，如果变量是字典就返回字典类型。
			dict.clear()
				删除字典内所有元素
			dict.copy()
				返回一个字典的浅复制
			dict.fromkeys(seq[, val]))
				创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值
			dict.get(key, default=None)
				返回指定键的值，如果值不在字典中返回default值
			dict.has_key(key)
				如果键在字典dict里返回true，否则返回false
			dict.items()
				以列表返回可遍历的(键, 值) 元组数组
			dict.keys()
				以列表返回一个字典所有的键
			dict.setdefault(key, default=None)
				和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default
			dict.update(dict2)
				把字典dict2的键/值对更新到dict里
			dict.values()
				以列表返回字典中的所有值

	4.set
		set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。
		要创建一个set，需要提供一个list作为输入集合：
		>>> s = set([1, 2, 3])
		>>> s
		{1, 2, 3}

		>>> s = set([1, 1, 2, 2, 3, 3])
		>>> s
		{1, 2, 3}
十二、日期和时间
	1.time 时间戳
		ticks = time.time()
		localtime = time.localtime(time.time())
			0	tm_year	2008
			1	tm_mon	1 到 12
			2	tm_mday	1 到 31
			3	tm_hour	0 到 23
			4	tm_min	0 到 59
			5	tm_sec	0 到 61 (60或61 是闰秒)
			6	tm_wday	0到6 (0是周一)
			7	tm_yday	1 到 366(儒略历)
			8	tm_isdst	-1, 0, 1, -1是决定是否为夏令时的旗帜

		格式化时间：
			localtime = time.asctime( time.localtime(time.time()) )
			time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
		其他方法：
			1	time.altzone
				返回格林威治西部的夏令时地区的偏移秒数。如果该地区在格林威治东部会返回负值（如西欧，包括英国）。对夏令时启用地区才能使用。
			2	time.asctime([tupletime])
				接受时间元组并返回一个可读的形式为"Tue Dec 11 18:07:14 2008"（2008年12月11日 周二18时07分14秒）的24个字符的字符串。
			3	time.clock( )
				用以浮点数计算的秒数返回当前的CPU时间。用来衡量不同程序的耗时，比time.time()更有用。
			4	time.ctime([secs])
				作用相当于asctime(localtime(secs))，未给参数相当于asctime()
			5	time.gmtime([secs])
				接收时间辍（1970纪元后经过的浮点秒数）并返回格林威治天文时间下的时间元组t。注：t.tm_isdst始终为0
			6	time.localtime([secs])
				接收时间辍（1970纪元后经过的浮点秒数）并返回当地时间下的时间元组t（t.tm_isdst可取0或1，取决于当地当时是不是夏令时）。
			7	time.mktime(tupletime)
				接受时间元组并返回时间辍（1970纪元后经过的浮点秒数）。
			8	time.sleep(secs)
				推迟调用线程的运行，secs指秒数。
			9	time.strftime(fmt[,tupletime])
				接收以时间元组，并返回以可读字符串表示的当地时间，格式由fmt决定。
			10	time.strptime(str,fmt='%a %b %d %H:%M:%S %Y')
				根据fmt的格式把一个时间字符串解析为时间元组。
			11	time.time( )
				返回当前时间的时间戳（1970纪元后经过的浮点秒数）。
			12	time.tzset()
				根据环境变量TZ重新初始化时间相关设置。

	2.calendar 日历
		cal = calendar.month(2016, 1)

		1	calendar.calendar(year,w=2,l=1,c=6)
			返回一个多行字符串格式的year年年历，3个月一行，间隔距离为c。 每日宽度间隔为w字符。每行长度为21* W+18+2* C。l是每星期行数。
		2	calendar.firstweekday( )
			返回当前每周起始日期的设置。默认情况下，首次载入caendar模块时返回0，即星期一。
		3	calendar.isleap(year)
			是闰年返回True，否则为false。
		4	calendar.leapdays(y1,y2)
			返回在Y1，Y2两年之间的闰年总数。
		5	calendar.month(year,month,w=2,l=1)
			返回一个多行字符串格式的year年month月日历，两行标题，一周一行。每日宽度间隔为w字符。每行的长度为7* w+6。l是每星期的行数。
		6	calendar.monthcalendar(year,month)
			返回一个整数的单层嵌套列表。每个子列表装载代表一个星期的整数。Year年month月外的日期都设为0;范围内的日子都由该月第几日表示，从1开始。
		7	calendar.monthrange(year,month)
			返回两个整数。第一个是该月的星期几的日期码，第二个是该月的日期码。日从0（星期一）到6（星期日）;月从1到12。
		8	calendar.prcal(year,w=2,l=1,c=6)
			相当于 print calendar.calendar(year,w,l,c).
		9	calendar.prmonth(year,month,w=2,l=1)
			相当于 print calendar.calendar（year，w，l，c）。
		10	calendar.setfirstweekday(weekday)
			设置每周的起始日期码。0（星期一）到6（星期日）。
		11	calendar.timegm(tupletime)
			和time.gmtime相反：接受一个时间元组形式，返回该时刻的时间辍（1970纪元后经过的浮点秒数）。
		12	calendar.weekday(year,month,day)
			返回给定日期的日期码。0（星期一）到6（星期日）。月份为 1（一月） 到 12（12月）。

十三、函数
	函数定义：
		函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()和冒号。
		任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。
		函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。
		函数内容需要缩进。
		return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。
		
		def functionname( parameters ):
			"函数_文档字符串"
			function_suite
			return [expression]

	函数调用：
		定义一个函数只给了函数一个名称，指定了函数里包含的参数，和代码块结构。
		def printme( str ):
			"打印任何传入的字符串"
			print str;
			return;

		printme("My string");
		printme(str = "My string");

	缺省参数：
		def printinfo( name, age = 35 ):
			"打印任何传入的字符串"
			print "Name: ", name;
			print "Age ", age;
			return;
		printinfo( age=50, name="miki" );
		printinfo( name="miki" );		

	不定长参数 - 可变参数：
		def functionname([formal_args,] *var_args_tuple ):
			"函数_文档字符串"
			function_suite
			return [expression]
	
	匿名函数 - lambda表达式 - 函数直接量：
		# 可写函数说明
		sum = lambda arg1, arg2: arg1 + arg2;
		 
		# 调用sum函数
		print "相加后的值为 : ", sum( 10, 20 )
		print "相加后的值为 : ", sum( 20, 20 )
	空函数
		
		如果想定义一个什么事也不做的空函数，可以用pass语句：
		def nop():
		    pass
		pass语句什么都不做，那有什么用？实际上pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。
		pass还可以用在其他语句里，比如：
		if age >= 18:
		    pass
		缺少了pass，代码运行就会有语法错误。
		
	函数是一等公民
		可以成为类的成员
		可以在方法中定义 
		可以被任意赋值
		可以作为参数被传递 被当作返回值返回
		闭包问题

十四、模块
	Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。
	模块让你能够有逻辑地组织你的 Python 代码段。
	把相关的代码分配到一个模块里能让你的代码更好用，更易懂。
	模块能定义函数，类和变量，模块里也能包含可执行的代码。

	引入模块
		import module1[, module2[,... moduleN]
	比如要引用模块 math，就可以在文件最开始的地方用 import math 来引入。在调用 math 模块中的函数时，必须这样引用：
		模块名.函数名
	From…import 语句
		Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中。语法如下：
		from modname import name1[, name2[, ... nameN]]				
	From…import* 语句
		把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：
		from modname import *
	搜索路径
		当你导入一个模块，Python 解析器对模块位置的搜索顺序是：
		1、当前目录
		2、如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。
		3、如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/。

十五、包
	包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。
	简单来说，包就是文件夹，但该文件夹下必须存在 __init__.py 文件, 该文件的内容可以为空。__init__.py用于标识当前文件夹是一个包。

	考虑一个在 package_runoob 目录下的 runoob1.py、runoob2.py、__init__.py 文件，test.py 为测试调用包的代码，目录结构如下：
		test.py
		package_runoob
		|-- __init__.py
		|-- runoob1.py
		|-- runoob2.py 

	package_runoob/runoob1.py
		#!/usr/bin/python
		# -*- coding: UTF-8 -*-
		def runoob1():
			print "I'm in runoob1"

	package_runoob/runoob2.py
		#!/usr/bin/python
		# -*- coding: UTF-8 -*-
		 
		def runoob2():
		   print "I'm in runoob2"

	package_runoob/__init__.py
		#!/usr/bin/python
		# -*- coding: UTF-8 -*-
		 
		if __name__ == '__main__':
		    print '作为主程序运行'
		else:
		    print 'package_runoob 初始化'

	test.py
		#!/usr/bin/python
		# -*- coding: UTF-8 -*-
		 
		# 导入 Phone 包
		from package_runoob.runoob1 import runoob1
		from package_runoob.runoob2 import runoob2

		runoob1()
		runoob2()

	以上实例输出结果：
		package_runoob 初始化
		I'm in runoob1
		I'm in runoob2

十六、IO
	1.打印到屏幕
		print "aaa";

	2.读取键盘输入
		raw_input函数
			str = raw_input("请输入：");
		input函数 - input([prompt]) 函数和 raw_input([prompt]) 函数基本类似，但是 input 可以接收一个Python表达式作为输入，并将运算结果返回。
			str = input("请输入：");
			输入:[x*5 for x in range(2,10,2)]
			str:  [10, 20, 30, 40]

	3.打开和关闭文件
		open 函数
			file = open(file_name [, access_mode][, buffering])
				file_name：file_name变量是一个包含了你要访问的文件名称的字符串值。
				access_mode：access_mode决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。
				buffering:如果buffering的值被设为0，就不会有寄存。如果buffering的值取1，访问文件时会寄存行。如果将buffering的值设为大于1的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。

			r	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
			rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。
			r+	打开一个文件用于读写。文件指针将会放在文件的开头。
			rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
			w	打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
			wb	以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
			w+	打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
			wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
			a	打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
			ab	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
			a+	打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
			ab+	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。

		file对象属性
			file.closed	返回true如果文件已被关闭，否则返回false。
			file.mode	返回被打开文件的访问模式。
			file.name	返回文件的名称。
			file.softspace	如果用print输出后，必须跟一个空格符，则返回false。否则返回true。

		关闭文件：
			fileObject.close();

		写文件：
			fileObject.write(string);

		读文件：
			fileObject.read([count]);

		文件随机读写：
			tell()方法告诉你文件内的当前位置；换句话说，下一次的读写会发生在文件开头这么多字节之后。
			seek(offset [,from])方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。
			如果from被设为0，这意味着将文件的开头作为移动字节的参考位置。如果设为1，则使用当前的位置作为参考位置。如果它被设为2，那么该文件的末尾将作为参考位置。

		重命名文件：
			os.rename(current_file_name, new_file_name)
		删除文件：
			os.remove(file_name)	

		创建目录：
			import os
			os.mkdir("newdir")
	
		改变的当前目录：
			os.chdir("newdir")
		
		删除目录：
			os.rmdir('dirname')

		File其他方法:
			file.close()
			关闭文件。关闭后文件不能再进行读写操作。
			file.flush()
			刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。
			file.fileno()
			返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。
			file.isatty()
			如果文件连接到一个终端设备返回 True，否则返回 False。
			file.next()
			返回文件下一行。
			file.read([size])
			从文件读取指定的字节数，如果未给定或为负则读取所有。
			file.readline([size])
			读取整行，包括 "\n" 字符。
			file.readlines([sizehint])
			读取所有行并返回列表，若给定sizeint>0，返回总和大约为sizeint字节的行, 实际读取值可能比sizhint较大, 因为需要填充缓冲区。
			file.seek(offset[, whence])
			设置文件当前位置
			file.tell()
			返回文件当前位置。
			file.truncate([size])
			截取文件，截取的字节通过size指定，默认为当前文件位置。
			file.write(str)
			将字符串写入文件，没有返回值。
			file.writelines(sequence)
			向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。

十七、异常处理
	===========================================
	python标准异常
		异常名称	描述
		BaseException	所有异常的基类
		SystemExit	解释器请求退出
		KeyboardInterrupt	用户中断执行(通常是输入^C)
		Exception	常规错误的基类
		StopIteration	迭代器没有更多的值
		GeneratorExit	生成器(generator)发生异常来通知退出
		StandardError	所有的内建标准异常的基类
		ArithmeticError	所有数值计算错误的基类
		FloatingPointError	浮点计算错误
		OverflowError	数值运算超出最大限制
		ZeroDivisionError	除(或取模)零 (所有数据类型)
		AssertionError	断言语句失败
		AttributeError	对象没有这个属性
		EOFError	没有内建输入,到达EOF 标记
		EnvironmentError	操作系统错误的基类
		IOError	输入/输出操作失败
		OSError	操作系统错误
		WindowsError	系统调用失败
		ImportError	导入模块/对象失败
		LookupError	无效数据查询的基类
		IndexError	序列中没有此索引(index)
		KeyError	映射中没有这个键
		MemoryError	内存溢出错误(对于Python 解释器不是致命的)
		NameError	未声明/初始化对象 (没有属性)
		UnboundLocalError	访问未初始化的本地变量
		ReferenceError	弱引用(Weak reference)试图访问已经垃圾回收了的对象
		RuntimeError	一般的运行时错误
		NotImplementedError	尚未实现的方法
		SyntaxError	Python 语法错误
		IndentationError	缩进错误
		TabError	Tab 和空格混用
		SystemError	一般的解释器系统错误
		TypeError	对类型无效的操作
		ValueError	传入无效的参数
		UnicodeError	Unicode 相关的错误
		UnicodeDecodeError	Unicode 解码时的错误
		UnicodeEncodeError	Unicode 编码时错误
		UnicodeTranslateError	Unicode 转换时错误
		Warning	警告的基类
		DeprecationWarning	关于被弃用的特征的警告
		FutureWarning	关于构造将来语义会有改变的警告
		OverflowWarning	旧的关于自动提升为长整型(long)的警告
		PendingDeprecationWarning	关于特性将会被废弃的警告
		RuntimeWarning	可疑的运行时行为(runtime behavior)的警告
		SyntaxWarning	可疑的语法的警告
		UserWarning	用户代码生成的警告
	===========================================
	
	try:
		<语句>        #运行别的代码
	except <名字>：
		<语句>        #如果在try部份引发了'name'异常
	except <名字>，<数据>:
		<语句>        #如果引发了'name'异常，获得附加的数据
	else:
		<语句>        #如果没有异常发生

	如果当try后的语句执行时发生异常，python就跳回到try并执行第一个匹配该异常的except子句，异常处理完毕，控制流就通过整个try语句（除非在处理异常时又引发新的异常）。
	如果在try后的语句里发生了异常，却没有匹配的except子句，异常将被递交到上层的try，或者到程序的最上层（这样将结束程序，并打印缺省的出错信息）。
	如果在try子句执行时没有发生异常，python将执行else语句后的语句（如果有else的话），然后控制流通过整个try语句。

	try:
		fh = open("testfile", "w")
		fh.write("这是一个测试文件，用于测试异常!!")
	except IOError:
		print "Error: 没有找到文件或读取文件失败"
	else:
		print "内容写入文件成功"
		fh.close()

	使用except而不带任何异常类型
	你可以不带任何异常类型使用except，如下实例：
		try:
		    正常的操作
		   ......................
		except:
		    发生异常，执行这块代码
		   ......................
		else:
		    如果没有异常执行这块代码

	try-finally 语句
		try-finally 语句无论是否发生异常都将执行最后的代码。
			try:
				<语句>
			finally:
				<语句>    #退出try时总会执行
	异常参数
		一个异常可以带上参数，可作为输出的异常信息参数。
		你可以通过except语句来捕获异常的参数，如下所示：
			try:
			    正常的操作
			   ......................
			except ExceptionType, Argument:
			    你可以在这输出 Argument 的值...
	触发异常
		我们可以使用raise语句自己触发异常
		raise语法格式如下：
		raise [Exception [, args [, traceback]]]

		def functionName( level ):
		    if level < 1:
		        raise Exception("Invalid level!", level)
		        # 触发异常后，后面的代码就不会再执行

	用户自定义异常
		通过创建一个新的异常类，程序可以命名它们自己的异常。异常应该是典型的继承自Exception类，通过直接或间接的方式。
		以下为与RuntimeError相关的实例,实例中创建了一个类，基类为RuntimeError，用于在异常触发时输出更多的信息。
		在try语句块中，用户自定义的异常后执行except块语句，变量 e 是用于创建Networkerror类的实例。
		class Networkerror(RuntimeError):
		    def __init__(self, arg):
		        self.args = arg
		在你定义以上类后，你可以触发该异常，如下所示：
		try:
		    raise Networkerror("Bad hostname")
		except Networkerror,e:
		    print e.args

十八、面向对象
	1.创建类
		使用class语句来创建一个新类，class之后为类的名称并以冒号结尾，如下实例:
		class ClassName:
		   '类的帮助信息'   #类文档字符串
		   class_suite  #类体

		类的帮助信息可以通过ClassName.__doc__查看。
		class_suite 由类成员，方法，数据属性组成。

		实例
			#!/usr/bin/python
			# -*- coding: UTF-8 -*-
			 
			class Employee:
			   '所有员工的基类'
			   empCount = 0
			 
			   def __init__(self, name, salary):
			      self.name = name
			      self.salary = salary
			      Employee.empCount += 1
			   
			   def displayCount(self):
			     print "Total Employee %d" % Employee.empCount
			 
			   def displayEmployee(self):
			      print "Name : ", self.name,  ", Salary: ", self.salary

			empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。
			第一种方法__init__()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法

		self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。
		self代表类的实例，而非类
		类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。
			class Test:
		    def prt(self):
		        print(self)
		        print(self.__class__)
		 
			t = Test()
			t.prt()
		#self 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:
		实例
		class Test:
		    def prt(runoob):
		        print(runoob)
		        print(runoob.__class__)
	 
		t = Test()
		t.prt()

	创建实例对象
		实例化类的对象在其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，在python中实例化类的对象似函数的调用。
		以下使用类的名称 Employee 来实例化，并通过 __init__ 方法接受参数。
		"创建 Employee 类的第一个对象"
			emp1 = Employee("Zara", 2000)
		"创建 Employee 类的第二个对象"
			emp2 = Employee("Manni", 5000)
		访问属性
			您可以使用点(.)来访问对象的属性。使用如下类的名称访问类变量:
			emp1.displayEmployee()
			emp2.displayEmployee()
			print "Total Employee %d" % Employee.empCount
 
		你可以添加，删除，修改类的属性，如下所示：
			emp1.age = 7  # 添加一个 'age' 属性
			emp1.age = 8  # 修改 'age' 属性
			del emp1.age  # 删除 'age' 属性
		你也可以使用以下函数的方式来访问属性：
			getattr(obj, name[, default]) : 访问对象的属性。
			hasattr(obj,name) : 检查是否存在一个属性。
			setattr(obj,name,value) : 设置一个属性。如果属性不存在，会创建一个新属性。
			delattr(obj, name) : 删除属性。
			hasattr(emp1, 'age')    # 如果存在 'age' 属性返回 True。
			getattr(emp1, 'age')    # 返回 'age' 属性的值
			setattr(emp1, 'age', 8) # 添加属性 'age' 值为 8
			delattr(empl, 'age')    # 删除属性 'age'
	Python内置类属性
		__dict__ : 类的属性（包含一个字典，由类的数据属性组成）
		__doc__ :类的文档字符串
		__name__: 类名
		__module__: 类定义所在的模块（类的全名是'__main__.className'，如果类位于一个导入模块mymod中，那么className.__module__ 等于 mymod）
		__bases__ : 类的所有父类构成元素（包含了一个由所有父类组成的元组）
	实例
		#!/usr/bin/python
		# -*- coding: UTF-8 -*-
		 
		class Employee:
		   '所有员工的基类'
		   empCount = 0
		 
		   def __init__(self, name, salary):
		      self.name = name
		      self.salary = salary
		      Employee.empCount += 1
		   
		   def displayCount(self):
		     print "Total Employee %d" % Employee.empCount
		 
		   def displayEmployee(self):
		      print "Name : ", self.name,  ", Salary: ", self.salary
		 
		print "Employee.__doc__:", Employee.__doc__
		print "Employee.__name__:", Employee.__name__
		print "Employee.__module__:", Employee.__module__
		print "Employee.__bases__:", Employee.__bases__
		print "Employee.__dict__:", Employee.__dict__
		执行以上代码输出结果如下：
		Employee.__doc__: 所有员工的基类
		Employee.__name__: Employee
		Employee.__module__: __main__
		Employee.__bases__: ()
		Employee.__dict__: {'__module__': '__main__', 'displayCount': <function displayCount at 0x10a939c80>, 'empCount': 0, 'displayEmployee': <function displayEmployee at 0x10a93caa0>, '__doc__': '\xe6\x89\x80\xe6\x9c\x89\xe5\x91\x98\xe5\xb7\xa5\xe7\x9a\x84\xe5\x9f\xba\xe7\xb1\xbb', '__init__': <function __init__ at 0x10a939578>}

	*阅读*python对象销毁(垃圾回收)
		Python 使用了引用计数这一简单技术来跟踪和回收垃圾。
		在 Python 内部记录着所有使用中的对象各有多少引用。
		一个内部跟踪变量，称为一个引用计数器。
		当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是"立即"的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。
			a = 40      # 创建对象  <40>
			b = a       # 增加引用， <40> 的计数
			c = [b]     # 增加引用.  <40> 的计数

			del a       # 减少引用 <40> 的计数
			b = 100     # 减少引用 <40> 的计数
			c[0] = -1   # 减少引用 <40> 的计数
		垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。
		实例
			析构函数 __del__ ，__del__在对象销毁的时候被调用，当对象不再被使用时，__del__方法运行：
			#!/usr/bin/python
			# -*- coding: UTF-8 -*-
			 
			class Point:
			   def __init__( self, x=0, y=0):
			      self.x = x
			      self.y = y
			   def __del__(self):
			      class_name = self.__class__.__name__
			      print class_name, "销毁"
			 
			pt1 = Point()
			pt2 = pt1
			pt3 = pt1
			print id(pt1), id(pt2), id(pt3) # 打印对象的id
			del pt1
			del pt2
			del pt3
			以上实例运行结果如下：
			3083401324 3083401324 3083401324
			Point 销毁
	类的继承
		面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。继承完全可以理解成类之间的类型和子类型关系。
		需要注意的地方：继承语法 class 派生类名（基类名）：//... 基类名写在括号里，基本类是在类定义的时候，在元组之中指明的。
		在python中继承中的一些特点：
			1：在继承中基类的构造（__init__()方法）不会被自动调用，它需要在其派生类的构造中亲自专门调用。
			2：在调用基类的方法时，需要加上基类的类名前缀，且需要带上self参数变量。区别于在类中调用普通函数时并不需要带上self参数
			3：Python总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。
		如果在继承元组中列了一个以上的类，那么它就被称作"多重继承" 。
		语法：
			派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：
		class SubClassName (ParentClass1[, ParentClass2, ...]):
		   'Optional class documentation string'
		   class_suite
		实例
			#!/usr/bin/python
			# -*- coding: UTF-8 -*-
			 
			class Parent:        # 定义父类
			   parentAttr = 100
			   def __init__(self):
			      print "调用父类构造函数"
			 
			   def parentMethod(self):
			      print '调用父类方法'
			 
			   def setAttr(self, attr):
			      Parent.parentAttr = attr
			 
			   def getAttr(self):
			      print "父类属性 :", Parent.parentAttr
			 
			class Child(Parent): # 定义子类
			   def __init__(self):
			      print "调用子类构造方法"
			 
			   def childMethod(self):
			      print '调用子类方法 child method'
			 
			c = Child()          # 实例化子类
			c.childMethod()      # 调用子类的方法
			c.parentMethod()     # 调用父类方法
			c.setAttr(200)       # 再次调用父类的方法
			c.getAttr()          # 再次调用父类的方法
		以上代码执行结果如下：
			调用子类构造方法
			调用子类方法 child method
			调用父类方法
			父类属性 : 200
		你可以继承多个类
			class A:        # 定义类 A
			.....

			class B:         # 定义类 B
			.....

			class C(A, B):   # 继承类 A 和 B
			.....
		你可以使用issubclass()或者isinstance()方法来检测。
			issubclass() - 布尔函数判断一个类是另一个类的子类或者子孙类，语法：issubclass(sub,sup)
			isinstance(obj, Class) 布尔函数如果obj是Class类的实例对象或者是一个Class子类的实例对象则返回true。
	方法重写
		如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法：
		实例
			#!/usr/bin/python
			# -*- coding: UTF-8 -*-
			 
			class Parent:        # 定义父类
			   def myMethod(self):
			      print '调用父类方法'
			 
			class Child(Parent): # 定义子类
			   def myMethod(self):
			      print '调用子类方法'
			 
			c = Child()          # 子类实例
			c.myMethod()         # 子类调用重写方法
		执行以上代码输出结果如下：
			调用子类方法
	基础重写方法
		下表列出了一些通用的功能，你可以在自己的类重写：
		1	__init__ ( self [,args...] )
		构造函数
		简单的调用方法: obj = className(args)
		2	__del__( self )
		析构方法, 删除一个对象
		简单的调用方法 : dell obj
		3	__repr__( self )
		转化为供解释器读取的形式
		简单的调用方法 : repr(obj)
		4	__str__( self )
		用于将值转化为适于人阅读的形式
		简单的调用方法 : str(obj)
		5	__cmp__ ( self, x )
	对象比较
		简单的调用方法 : cmp(obj, x)
	运算符重载
		Python同样支持运算符重载，实例如下：
		实例
			#!/usr/bin/python
			 
			class Vector:
			   def __init__(self, a, b):
			      self.a = a
			      self.b = b
			 
			   def __str__(self):
			      return 'Vector (%d, %d)' % (self.a, self.b)
			   
			   def __add__(self,other):
			      return Vector(self.a + other.a, self.b + other.b)
			 
			v1 = Vector(2,10)
			v2 = Vector(5,-2)
			print v1 + v2
		以上代码执行结果如下所示:
			Vector(7,8)
	类属性与方法
		类的私有属性
			__private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。
		类的方法
			在类地内部，使用def关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数self,且为第一个参数
		类的私有方法
			__private_method：两个下划线开头，声明该方法为私有方法，不能在类地外部调用。在类的内部调用 self.__private_methods
		实例
			#!/usr/bin/python
			# -*- coding: UTF-8 -*-
			 
			class JustCounter:
			    __secretCount = 0  # 私有变量
			    publicCount = 0    # 公开变量
			 
			    def count(self):
			        self.__secretCount += 1
			        self.publicCount += 1
			        print self.__secretCount
			 
			counter = JustCounter()
			counter.count()
			counter.count()
			print counter.publicCount
			print counter.__secretCount  # 报错，实例不能访问私有变量
	Python 通过改变名称来包含类名:
			1
			2
			2
			Traceback (most recent call last):
			  File "test.py", line 17, in <module>
			    print counter.__secretCount  # 报错，实例不能访问私有变量
			AttributeError: JustCounter instance has no attribute '__secretCount'
	Python不允许实例化的类访问私有数据，但你可以使用 object._className__attrName 访问属性，将如下代码替换以上代码的最后一行代码：
		.........................
		print counter._JustCounter__secretCount
	执行以上代码，执行结果如下：
		1
		2
		2
		2
	单下划线、双下划线、头尾双下划线说明：
		__foo__: 定义的是特列方法，类似 __init__() 之类的。
		_foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *
		__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。









	